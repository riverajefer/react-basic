{"version":3,"sources":["components/Person/Person.js","components/Clock/Clock.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Person","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","name","Component","Clock","_this","state","date","Date","_this2","timerID","setInterval","tick","setState","clearInterval","toLocaleTimeString","App","src","logo","alt","width","components_Person_Person","components_Clock_Clock","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"iPAkBeA,cAdb,SAAAA,EAAYC,GAAO,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACXH,0EAGN,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,2CAAmCN,KAAKH,MAAMW,cAPjCC,aCqCNC,cAlCb,SAAAA,EAAYb,GAAO,IAAAc,EAAA,OAAAb,OAAAC,EAAA,EAAAD,CAAAE,KAAAU,IACjBC,EAAAb,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAY,GAAAP,KAAAH,KAAMH,KACDe,MAAQ,CACXC,KAAM,IAAIC,MAHKH,mFAOC,IAAAI,EAAAf,KAClBA,KAAKgB,QAAUC,YACb,kBAAMF,EAAKG,QACX,oCAKFlB,KAAKmB,SAAS,CACZN,KAAM,IAAIC,sDAMZM,cAAcpB,KAAKgB,0CAInB,OAASZ,EAAAC,EAAAC,cAAA,OAAKC,UAAY,SACxBH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,oBAAaN,KAAKY,MAAMC,KAAKQ,8BA7BfZ,aCiCLa,MAhCf,WACE,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKiB,IAAKC,IAAMjB,UAAU,WAAWkB,IAAI,OAAOC,MAAM,SACtDtB,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqB,EAAD,CAAQnB,KAAK,SACbJ,EAAAC,EAAAC,cAACqB,EAAD,CAAQnB,KAAK,QACbJ,EAAAC,EAAAC,cAACqB,EAAD,CAAQnB,KAAK,QACbJ,EAAAC,EAAAC,cAACqB,EAAD,CAAQnB,KAAK,QACbJ,EAAAC,EAAAC,cAACqB,EAAD,CAAQnB,KAAK,QACbJ,EAAAC,EAAAC,cAACqB,EAAD,CAAQnB,KAAK,SAEfJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsB,EAAD,OAEFxB,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVsB,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,qBCbYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.7797b797.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass Person extends Component {\n  constructor(props){\n    super(props);\n  }\n  render(){\n    return (\n      <div className=\"Person\">\n        <p>Hola soy un componente Person: {this.props.name}</p>\n      </div>\n    )\n  }\n}\nPerson.propTypes = {\n}\n\nexport default Person;","import React, {\n  Component\n} from 'react';\nimport PropTypes from 'prop-types';\n\nclass Clock extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date()\n    }\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n  \n  \n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  render() {\n    return ( <div className = \"Clock\" >\n      <h1> Clock </h1>\n      <h2 > It is {this.state.date.toLocaleTimeString()}</h2></div>\n    )\n  }\n}\nClock.propTypes = {}\n\nexport default Clock;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Person from './components/Person/Person'\nimport Clock from './components/Clock/Clock';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" width=\"50px\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <Person name=\"Jeff\"/>\n          <Person name=\"Doe\"/>\n          <Person name=\"Lin\"/>\n          <Person name=\"Jan\"/>\n          <Person name=\"Mon\"/>\n          <Person name=\"Ran\"/>\n        </div>\n        <div>\n          <Clock />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React...\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}